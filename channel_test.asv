sigman = 0.2;

receivedsignal = transmitsignal + sigman/sqrt(2) * (randn(size(transmitsignal))+j*randn(size(transmitsignal)));
%T o test the effect of phase offset and delay, you could simulate such a channel as
padding = (randn(1,1000) > 0.5) * 2 - 1;
transmitsignalwithdelay = [zeros(1, 2147), transmitsignal, padding];
receivedsignal = exp(j*pi/6) * transmitsignalwithdelay + sigman/sqrt(2) * (randn(size(transmitsignalwithdelay))+j*randn(size(transmitsignalwithdelay)));
receivedsignal = receivedsignal;


y = receivedsignal;
y_symbols = (receivedsignal > 0) * 2 - 1; % turn to symbols
y_symbols = y_symbols * 0.3;

% Time sync
[corr, lags] = xcorr(y_symbols, t);
[~, timing_index] = max(abs(corr));
timing_offset = lags(timing_index);
delta = timing_offset + length(t); % determine the start of the first pilot

% Equalize based on number of chunks (n) and remove pilots from message
equalized_message = [];
matched_filter = fliplr(pt);

for i = 1:1:n
    % extract nth pilot
    pilot = y(delta + 1:delta + length(ps));

    % calculate one tap
    one_tap = (conj(ps)*pilot') / (conj(ps)*ps');

    % equalize only that chunk
    start_of_chunk = delta + length(ps);
    equalized_chunk = y(start_of_chunk + 1:start_of_chunk + chunk_size) * one_tap;

    % filter equalized chunk
    filtered_chunk = conv(equalized_chunk, matched_filter);

    % sample filtered chunk
    sampled_chunk = filtered_chunk(1:L:14400);

    % add equalized chunk to message
    equalized_message = [equalized_message, sampled_chunk];
    
    % update delta to start of next pilot sequence
    delta = start_of_chunk + chunk_size;
end

z_k = equalized_message;

% demodulate (threshold)
z_demodulated = z_k > 0;


% BER
message = imread("shannon1440.bmp");
message_vec = reshape(message, 1, []);

bits = message_vec;
BER = mean(z_demodulated(1:length(bits)) ~= bits);
disp(['BER is ', num2str(BER)])

figure(3);
plot(real(z_k(1:1440)), imag(z_k(1:1440)), 'rx');

figure(1);
plot(real(receivedsignal), imag(receivedsignal), 'rx');

